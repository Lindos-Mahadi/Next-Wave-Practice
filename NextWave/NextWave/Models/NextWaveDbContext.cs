// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace NextWave.Models
{
    public partial class NextWaveDbContext : DbContext
    {
        public NextWaveDbContext()
        {
        }

        public NextWaveDbContext(DbContextOptions<NextWaveDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AsicTxnFile> AsicTxnFiles { get; set; }
        public virtual DbSet<AsicTxnStatus> AsicTxnStatuses { get; set; }
        public virtual DbSet<Companysearch> Companysearches { get; set; }
        public virtual DbSet<Lblmsg> Lblmsgs { get; set; }
        public virtual DbSet<Lodgement> Lodgements { get; set; }
        public virtual DbSet<Ra55> Ra55s { get; set; }
        public virtual DbSet<Ra56> Ra56s { get; set; }
        public virtual DbSet<Registration> Registrations { get; set; }
        public virtual DbSet<ShareAllocate> ShareAllocates { get; set; }
        public virtual DbSet<ShareDistributeGrid> ShareDistributeGrids { get; set; }
        public virtual DbSet<Step1> Step1s { get; set; }
        public virtual DbSet<Step2> Step2s { get; set; }
        public virtual DbSet<Step3> Step3s { get; set; }
        public virtual DbSet<Step4Anothershareholder> Step4Anothershareholders { get; set; }
        public virtual DbSet<TblCompany> TblCompanies { get; set; }
        public virtual DbSet<TblCompanyAddress> TblCompanyAddresses { get; set; }
        public virtual DbSet<TblCompanyDirector> TblCompanyDirectors { get; set; }
        public virtual DbSet<TblCompanyShare> TblCompanyShares { get; set; }
        public virtual DbSet<TblCompanyTrust> TblCompanyTrusts { get; set; }
        public virtual DbSet<TblContact> TblContacts { get; set; }
        public virtual DbSet<TblOption> TblOptions { get; set; }
        public virtual DbSet<TblTransaction> TblTransactions { get; set; }
        public virtual DbSet<TblTrust> TblTrusts { get; set; }
        public virtual DbSet<TblTrustAppointer> TblTrustAppointers { get; set; }
        public virtual DbSet<TblTrustOption> TblTrustOptions { get; set; }
        public virtual DbSet<TblUser> TblUsers { get; set; }
        public virtual DbSet<TblUserMetum> TblUserMeta { get; set; }
        public virtual DbSet<TempCsearch> TempCsearches { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AsicTxnFile>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ASIC_TXN_File");

                entity.Property(e => e.Acn)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ACN")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Companyid)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("companyid");

                entity.Property(e => e.Companyname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("companyname");

                entity.Property(e => e.Datera55)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DATERA55");

                entity.Property(e => e.Datera56)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DATERA56");

                entity.Property(e => e.DocumentNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_NUMBER")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Formdata).HasColumnName("formdata");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Ra55).HasColumnName("RA55");

                entity.Property(e => e.Ra56).HasColumnName("RA56");

                entity.Property(e => e.TransStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRANS_STATUS")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Txndate)
                    .HasColumnType("datetime")
                    .HasColumnName("txndate")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<AsicTxnStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ASIC_TXN_STATUS");

                entity.Property(e => e.Companyid).HasColumnName("companyid");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Isaccepted).HasColumnName("isaccepted");

                entity.Property(e => e.Iserror).HasColumnName("iserror");

                entity.Property(e => e.Istxnsuccess).HasColumnName("istxnsuccess");

                entity.Property(e => e.Ra55data).HasColumnName("ra55data");

                entity.Property(e => e.Ra56data).HasColumnName("ra56data");

                entity.Property(e => e.Txndate)
                    .HasColumnType("datetime")
                    .HasColumnName("txndate")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<Companysearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("companysearch");

                entity.Property(e => e.AsicAcn)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Asic_ACN");

                entity.Property(e => e.AsicDocNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Asic_DocNo");

                entity.Property(e => e.AsicError).HasColumnName("Asic_Error");

                entity.Property(e => e.AsicFile).HasColumnName("Asic_File");

                entity.Property(e => e.AsicOutFile).HasColumnName("Asic_OUT_File");

                entity.Property(e => e.AsicResType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Asic_ResType");

                entity.Property(e => e.AsicStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Asic_status")
                    .HasDefaultValueSql("('INCOMPLETE')");

                entity.Property(e => e.CompanyName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FullAddress)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Fullname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("FULLNAME");

                entity.Property(e => e.Govofcomapany)
                    .IsUnicode(false)
                    .HasColumnName("govofcomapany");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Isship)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("isship")
                    .HasDefaultValueSql("('No')");

                entity.Property(e => e.SearchOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ShowStatus).HasColumnName("show_status");

                entity.Property(e => e.Status)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("status");

                entity.Property(e => e.Userid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("userid");
            });

            modelBuilder.Entity<Lblmsg>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LBLmsg");

                entity.Property(e => e.Companyid)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("companyid");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("entrydate");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Sms).HasColumnName("sms");
            });

            modelBuilder.Entity<Lodgement>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("lodgement");

                entity.Property(e => e.AsicRegisteredAgentNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("asic_registered_agentNo");

                entity.Property(e => e.Contactname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("contactname");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("email");

                entity.Property(e => e.Firm)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("firm");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Postaladdress)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("postaladdress");

                entity.Property(e => e.Postcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("postcode");

                entity.Property(e => e.Stateterritory)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("stateterritory");

                entity.Property(e => e.Suburb)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("suburb");

                entity.Property(e => e.Telephone)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("telephone");
            });

            modelBuilder.Entity<Ra55>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RA55");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Acn)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ACN");

                entity.Property(e => e.CertificatePrintOption)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyClass)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.CompanySubclass)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateOfRegistration)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("entrydate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FormCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.InvoiceAmmount)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JurisdictionOfRegistration)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RegisteredAgentAddress)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RegisteredAgentName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAbn)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SupplierABN");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TaxAmmount)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TaxInvoiceText)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Ra56>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RA56");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AsicadviceType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ASICAdviceType");

                entity.Property(e => e.DateOfAdvice)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("entrydate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FormCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.InvoiceAmmount)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceDescription)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ProposedCompanyName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.RegisteredAgentAddress)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RegisteredAgentName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RequestDocumentNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierAbn)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SupplierABN");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TaxAmmount)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TaxInvoiceText)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Registration>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Registration");

                entity.Property(e => e.AgentSiteName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FamilyName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.GivenName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Isactive)
                    .HasColumnName("isactive")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Logopath).IsUnicode(false);

                entity.Property(e => e.OrganizationAbn)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OrganizationABN");

                entity.Property(e => e.OrganizationName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Pass)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("pass");

                entity.Property(e => e.Phone)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Postcode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ProfileCategory)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Registrationdate)
                    .HasColumnType("datetime")
                    .HasColumnName("registrationdate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Sno)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("sno");

                entity.Property(e => e.State)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StreetNumberStreetName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Suburb)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UnitLevelSuits)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Website)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ShareAllocate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Share_Allocate");

                entity.Property(e => e.Companyid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("companyid");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("entrydate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Shareclass)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("shareclass");

                entity.Property(e => e.Sno).HasColumnName("sno");

                entity.Property(e => e.Totalprice)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("totalprice");

                entity.Property(e => e.Totalshares).HasColumnName("totalshares");

                entity.Property(e => e.Unitprice)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("unitprice");
            });

            modelBuilder.Entity<ShareDistributeGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Share_distribute_grid");

                entity.Property(e => e.CAmountpaidpershare)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("c_amountpaidpershare");

                entity.Property(e => e.CAmountremainingUnpaidpershare)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("c_amountremaining_unpaidpershare");

                entity.Property(e => e.CCertificateno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("c_certificateno");

                entity.Property(e => e.CSharerange)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("c_sharerange");

                entity.Property(e => e.CTotalamountpaidpershare)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("c_totalamountpaidpershare");

                entity.Property(e => e.CTotalamountunpaidpershare)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("c_totalamountunpaidpershare");

                entity.Property(e => e.CTotalshares)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("c_totalshares");

                entity.Property(e => e.Companyid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("companyid");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("entrydate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IndividualOrCompany)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("individual_or_company");

                entity.Property(e => e.Linkid)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("linkid");

                entity.Property(e => e.Shareclass)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("shareclass");

                entity.Property(e => e.Sno)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("sno");

                entity.Property(e => e.Totalprice)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("totalprice");

                entity.Property(e => e.Totalshares)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("totalshares");

                entity.Property(e => e.Unitprice)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("unitprice");
            });

            modelBuilder.Entity<Step1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("step1");

                entity.Property(e => e.Acn)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("acn");

                entity.Property(e => e.Acnarbnabn)
                    .IsUnicode(false)
                    .HasColumnName("acnarbnabn");

                entity.Property(e => e.Cash)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cash");

                entity.Property(e => e.Classofcompany)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("classofcompany");

                entity.Property(e => e.Closingtime)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyActingAsTrustee)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyNameAsicFrom401)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CompanyName_Asic_from401");

                entity.Property(e => e.Companyid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("companyid");

                entity.Property(e => e.Companyname)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("companyname");

                entity.Property(e => e.CompanynameExt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("companyname_ext");

                entity.Property(e => e.Companyusedfor)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("companyusedfor");

                entity.Property(e => e.CountryIcor)
                    .IsUnicode(false)
                    .HasColumnName("countryIcor");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("entrydate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IndivisualCompanyAsicForm401)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Indivisual_Company_Asic_form401");

                entity.Property(e => e.Isproposeidentical)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("isproposeidentical");

                entity.Property(e => e.Isreservecompany410)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("isreservecompany410");

                entity.Property(e => e.Isspecialpurpose)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("isspecialpurpose");

                entity.Property(e => e.Isultimateholdingcompany)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("isultimateholdingcompany");

                entity.Property(e => e.Openingtime)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProposedNameYesNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("proposed_Name_Yes_No");

                entity.Property(e => e.ProposeidenticalAfter28may)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("proposeidentical_after28may");

                entity.Property(e => e.ProposeidenticalAfter28mayAbnnumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("proposeidentical_after28may_abnnumber");

                entity.Property(e => e.ProposeidenticalBefore28may)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("proposeidentical_before28may");

                entity.Property(e => e.ProposeidenticalBefore28mayPreviousbusinessno1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("proposeidentical_before28may_previousbusinessno1");

                entity.Property(e => e.ProposeidenticalBefore28mayPreviousbusinessno2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("proposeidentical_before28may_previousbusinessno2");

                entity.Property(e => e.ProposeidenticalBefore28mayPreviousbusinessno3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("proposeidentical_before28may_previousbusinessno3");

                entity.Property(e => e.ProposeidenticalBefore28mayPreviousbusinessno4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("proposeidentical_before28may_previousbusinessno4");

                entity.Property(e => e.ProposeidenticalBefore28mayPreviousbusinessno5)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("proposeidentical_before28may_previousbusinessno5");

                entity.Property(e => e.ProposeidenticalBefore28mayPreviousbusinessno6)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("proposeidentical_before28may_previousbusinessno6");

                entity.Property(e => e.ProposeidenticalBefore28mayPreviousbusinessno7)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("proposeidentical_before28may_previousbusinessno7");

                entity.Property(e => e.ProposeidenticalBefore28mayPreviousbusinessno8)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("proposeidentical_before28may_previousbusinessno8");

                entity.Property(e => e.ProposeidenticalBefore28mayPreviousstateteritory1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("proposeidentical_before28may_previousstateteritory1");

                entity.Property(e => e.ProposeidenticalBefore28mayPreviousstateteritory2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("proposeidentical_before28may_previousstateteritory2");

                entity.Property(e => e.ProposeidenticalBefore28mayPreviousstateteritory3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("proposeidentical_before28may_previousstateteritory3");

                entity.Property(e => e.ProposeidenticalBefore28mayPreviousstateteritory4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("proposeidentical_before28may_previousstateteritory4");

                entity.Property(e => e.ProposeidenticalBefore28mayPreviousstateteritory5)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("proposeidentical_before28may_previousstateteritory5");

                entity.Property(e => e.ProposeidenticalBefore28mayPreviousstateteritory6)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("proposeidentical_before28may_previousstateteritory6");

                entity.Property(e => e.ProposeidenticalBefore28mayPreviousstateteritory7)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("proposeidentical_before28may_previousstateteritory7");

                entity.Property(e => e.ProposeidenticalBefore28mayPreviousstateteritory8)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("proposeidentical_before28may_previousstateteritory8");

                entity.Property(e => e.ProposeidenticalBefore28mayTotalstate).HasColumnName("proposeidentical_before28may_totalstate");

                entity.Property(e => e.Reservecompany410Asicnamereservationnumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("reservecompany410_asicnamereservationnumber");

                entity.Property(e => e.Reservecompany410Fulllegalname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("reservecompany410_fulllegalname");

                entity.Property(e => e.SpecialpurposeIfapplicable)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("specialpurpose_ifapplicable");

                entity.Property(e => e.StandardHours).HasColumnName("standard_hours");

                entity.Property(e => e.Stateterritorry)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("stateterritorry");

                entity.Property(e => e.TrusteeAbn)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("trustee_abn");

                entity.Property(e => e.TrusteeAddress)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("trustee_address");

                entity.Property(e => e.TrusteeCountry)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("trustee_country");

                entity.Property(e => e.TrusteeTfn)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("trustee_tfn");

                entity.Property(e => e.TrusteeTrustname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("trustee_trustname");

                entity.Property(e => e.Typeofcompany)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("typeofcompany");

                entity.Property(e => e.Typeofuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("typeofuser");

                entity.Property(e => e.Ucompanyname)
                    .IsUnicode(false)
                    .HasColumnName("ucompanyname");

                entity.Property(e => e.UlimateHoldingCompany)
                    .IsUnicode(false)
                    .HasColumnName("ulimateHoldingCompany");

                entity.Property(e => e.UltimateholdingcompanyAbn)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ultimateholdingcompany_ABN");

                entity.Property(e => e.UltimateholdingcompanyAcnArbn)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ultimateholdingcompany_ACN_ARBN");

                entity.Property(e => e.UltimateholdingcompanyCountry)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ultimateholdingcompany_country");

                entity.Property(e => e.UltimateholdingcompanyFulllegalname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ultimateholdingcompany_fulllegalname");

                entity.Property(e => e.Writtencontact)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("writtencontact");
            });

            modelBuilder.Entity<Step2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("step2");

                entity.Property(e => e.Companyid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("companyid");

                entity.Property(e => e.Contactperson)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("contactperson");

                entity.Property(e => e.ContactpersonPrimary)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("contactperson_primary");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("entrydate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Iscompanylocatedaboveaddress)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("iscompanylocatedaboveaddress");

                entity.Property(e => e.Isprimaryaddress)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("isprimaryaddress");

                entity.Property(e => e.Occupiername)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("occupiername");

                entity.Property(e => e.Postcode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("postcode");

                entity.Property(e => e.PostcodePrimary)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("postcode_primary");

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("state");

                entity.Property(e => e.StatePrimary)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("state_primary");

                entity.Property(e => e.StreetNoName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("streetNoName");

                entity.Property(e => e.StreetNoNamePrimary)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("streetNoName_primary");

                entity.Property(e => e.SuburbTownCity)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("suburb_town_city");

                entity.Property(e => e.SuburbTownCityPrimary)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("suburb_town_city_primary");

                entity.Property(e => e.UnitLevelSuite)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("unit_level_suite");

                entity.Property(e => e.UnitLevelSuitePrimary)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("unit_level_suite_primary");
            });

            modelBuilder.Entity<Step3>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("step3");

                entity.Property(e => e.Anyformername)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("anyformername");

                entity.Property(e => e.Companyid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("companyid");

                entity.Property(e => e.Country)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("country");

                entity.Property(e => e.Countryofbirth)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("countryofbirth");

                entity.Property(e => e.Designation)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("designation");

                entity.Property(e => e.Dob)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("dob");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("entrydate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Familyname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("familyname");

                entity.Property(e => e.FamilynameFormer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("familyname_former");

                entity.Property(e => e.Firstname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("firstname");

                entity.Property(e => e.FirstnameFormer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("firstname_former");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Isdirector)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("isdirector");

                entity.Property(e => e.Ispublicofficer)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ispublicofficer");

                entity.Property(e => e.Issecretary)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("issecretary");

                entity.Property(e => e.Middlename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("middlename");

                entity.Property(e => e.MiddlenameFormer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("middlename_former");

                entity.Property(e => e.Placeofbirth)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("placeofbirth");

                entity.Property(e => e.PostcodePrimary)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("postcode_primary");

                entity.Property(e => e.StatePrimary)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("state_primary");

                entity.Property(e => e.StreetNoNamePrimary)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("streetNoName_primary");

                entity.Property(e => e.SuburbTownCityPrimary)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("suburb_town_city_primary");

                entity.Property(e => e.UnitLevelSuitePrimary)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("unit_level_suite_primary");
            });

            modelBuilder.Entity<Step4Anothershareholder>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("step4_anothershareholder");

                entity.Property(e => e.Amountpaidpershare)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("amountpaidpershare");

                entity.Property(e => e.Amountremainingunpaidpershare)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("amountremainingunpaidpershare");

                entity.Property(e => e.Beneficialownername)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("beneficialownername");

                entity.Property(e => e.Companyid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("companyid");

                entity.Property(e => e.Dirid)
                    .HasColumnName("dirid")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Entrydate)
                    .HasColumnType("datetime")
                    .HasColumnName("entrydate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IndividualOrCompany)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("individual_or_company");

                entity.Property(e => e.IndividualOrCompanyAcn)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("individual_or_company_acn");

                entity.Property(e => e.IndividualOrCompanyAddress)
                    .IsUnicode(false)
                    .HasColumnName("individual_or_company_address");

                entity.Property(e => e.IndividualOrCompanyCountry)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("individual_or_company_country");

                entity.Property(e => e.IndividualOrCompanyDob)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("individual_or_company_dob");

                entity.Property(e => e.IndividualOrCompanyName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("individual_or_company_name");

                entity.Property(e => e.IndividualOrCompanyPostcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("individual_or_company_postcode");

                entity.Property(e => e.IndividualOrCompanyState)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("individual_or_company_state");

                entity.Property(e => e.IndividualOrCompanyStreetNoName)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("individual_or_company_streetNoName");

                entity.Property(e => e.IndividualOrCompanySuburbTownCity)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("individual_or_company_suburb_town_city");

                entity.Property(e => e.IndividualOrCompanyUnitLevelSuite)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("individual_or_company_unit_level_suite");

                entity.Property(e => e.Isheldanotherorg)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("isheldanotherorg");

                entity.Property(e => e.Isjoint)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("ISJOINT");

                entity.Property(e => e.JointIndividualOrCompany)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("JOINT_individual_or_company");

                entity.Property(e => e.JointIndividualOrCompanyAcn)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("joint_individual_or_company_acn");

                entity.Property(e => e.JointIndividualOrCompanyCountry)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("joint_individual_or_company_country");

                entity.Property(e => e.JointIndividualOrCompanyDob)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("joint_individual_or_company_dob");

                entity.Property(e => e.JointIndividualOrCompanyName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("joint_individual_or_company_name");

                entity.Property(e => e.JointIndividualOrCompanyPostcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("joint_individual_or_company_postcode");

                entity.Property(e => e.JointIndividualOrCompanyState)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("joint_individual_or_company_state");

                entity.Property(e => e.JointIndividualOrCompanyStreetNoName)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("joint_individual_or_company_streetNoName");

                entity.Property(e => e.JointIndividualOrCompanySuburbTownCity)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("joint_individual_or_company_suburb_town_city");

                entity.Property(e => e.JointIndividualOrCompanyUnitLevelSuite)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("joint_individual_or_company_unit_level_suite");

                entity.Property(e => e.NoOfShares).HasColumnName("no_of_shares");

                entity.Property(e => e.Placeofbirth)
                    .IsUnicode(false)
                    .HasColumnName("placeofbirth");

                entity.Property(e => e.ShareclasstypeText)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("shareclasstype_text");

                entity.Property(e => e.ShareclasstypeValue)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("shareclasstype_value");

                entity.Property(e => e.Sharedetailsnotheldanotherorg)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("sharedetailsnotheldanotherorg");

                entity.Property(e => e.Shareholderdetails)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("shareholderdetails");

                entity.Property(e => e.Shareoption)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("shareoption");

                entity.Property(e => e.Step4Id).HasColumnName("step4ID");
            });

            modelBuilder.Entity<TblCompany>(entity =>
            {
                entity.ToTable("Tbl_Company");

                entity.Property(e => e.Abn)
                    .HasMaxLength(50)
                    .HasColumnName("ABN");

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.CompanyName).HasMaxLength(500);

                entity.Property(e => e.CompanyPurpose).HasMaxLength(4000);

                entity.Property(e => e.CompanySecretary).HasMaxLength(250);

                entity.Property(e => e.CompanyUseFor).HasMaxLength(4000);

                entity.Property(e => e.DateOfIncorporation).HasMaxLength(50);

                entity.Property(e => e.HowfstmeetingOfDirheld).HasMaxLength(250);

                entity.Property(e => e.NameReserved).HasDefaultValueSql("((0))");

                entity.Property(e => e.PublicOfficerOfCompany).HasMaxLength(250);

                entity.Property(e => e.RegistrationState).HasMaxLength(50);

                entity.Property(e => e.Smsfdeclaration).HasColumnName("SMSFdeclaration");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.HasOne(d => d.AddedByNavigation)
                    .WithMany(p => p.TblCompanyAddedByNavigations)
                    .HasForeignKey(d => d.AddedBy)
                    .HasConstraintName("FK_Tbl_Company_Tbl_User");

                entity.HasOne(d => d.UpdatedByNavigation)
                    .WithMany(p => p.TblCompanyUpdatedByNavigations)
                    .HasForeignKey(d => d.UpdatedBy)
                    .HasConstraintName("FK_Tbl_Company_Tbl_User1");
            });

            modelBuilder.Entity<TblCompanyAddress>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Tbl_CompanyAddress");

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.PostCode).HasMaxLength(500);

                entity.Property(e => e.State).HasMaxLength(500);

                entity.Property(e => e.Street).HasMaxLength(2000);

                entity.Property(e => e.Suburb).HasMaxLength(500);

                entity.Property(e => e.UnitLevel).HasMaxLength(2000);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Tbl_CompanyAddress_Tbl_Company");
            });

            modelBuilder.Entity<TblCompanyDirector>(entity =>
            {
                entity.ToTable("Tbl_CompanyDirector");

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.Dobaddress)
                    .HasMaxLength(500)
                    .HasColumnName("DOBaddress");

                entity.Property(e => e.Dobcity)
                    .HasMaxLength(500)
                    .HasColumnName("DOBcity");

                entity.Property(e => e.Dobcountry)
                    .HasMaxLength(500)
                    .HasColumnName("DOBcountry");

                entity.Property(e => e.Dobday).HasColumnName("DOBday");

                entity.Property(e => e.Dobmonth).HasColumnName("DOBmonth");

                entity.Property(e => e.Dobstate)
                    .HasMaxLength(500)
                    .HasColumnName("DOBstate");

                entity.Property(e => e.Dobyear).HasColumnName("DOByear");

                entity.Property(e => e.FirstName).HasMaxLength(500);

                entity.Property(e => e.LastName).HasMaxLength(500);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.TblCompanyDirectors)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Tbl_CompanyDirector_Tbl_Company");
            });

            modelBuilder.Entity<TblCompanyShare>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Tbl_CompanyShare");

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.OwnerName).HasMaxLength(500);

                entity.Property(e => e.ShareClass).HasMaxLength(500);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Tbl_CompanyShare_Tbl_Company");

                entity.HasOne(d => d.Director)
                    .WithMany()
                    .HasForeignKey(d => d.DirectorId)
                    .HasConstraintName("FK_Tbl_CompanyShare_Tbl_CompanyDirector");
            });

            modelBuilder.Entity<TblCompanyTrust>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Tbl_CompanyTrust");

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.Country).HasMaxLength(50);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.TrustAbn)
                    .HasMaxLength(50)
                    .HasColumnName("TrustABN");

                entity.Property(e => e.TrustAddress).HasMaxLength(500);

                entity.Property(e => e.TrustName).HasMaxLength(500);

                entity.Property(e => e.TrustTfn)
                    .HasMaxLength(50)
                    .HasColumnName("TrustTFN");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.HasOne(d => d.Company)
                    .WithMany()
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Tbl_Trust_Tbl_Company");
            });

            modelBuilder.Entity<TblContact>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Tbl_Contact");

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.Subject).HasMaxLength(500);
            });

            modelBuilder.Entity<TblOption>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Tbl_Options");

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.DeletedDate).HasColumnType("datetime");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.OptionName).HasMaxLength(4000);

                entity.Property(e => e.OptionValue).HasMaxLength(4000);

                entity.Property(e => e.Type)
                    .HasMaxLength(250)
                    .HasColumnName("_Type");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblTransaction>(entity =>
            {
                entity.ToTable("Tbl_Transaction");

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.FormName).HasMaxLength(4000);

                entity.Property(e => e.FormType).HasMaxLength(50);

                entity.Property(e => e.TxnId).HasMaxLength(50);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblTrust>(entity =>
            {
                entity.ToTable("Tbl_Trust");

                entity.Property(e => e.Abn)
                    .HasMaxLength(2000)
                    .HasColumnName("ABN");

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.ClauseNumber).IsUnicode(false);

                entity.Property(e => e.Email).HasMaxLength(500);

                entity.Property(e => e.ExistingSetupDate).IsUnicode(false);

                entity.Property(e => e.FirstName).HasMaxLength(200);

                entity.Property(e => e.LastName).HasMaxLength(200);

                entity.Property(e => e.LenderName).HasMaxLength(2000);

                entity.Property(e => e.MeetingTime).HasColumnType("datetime");

                entity.Property(e => e.OrdinaryPrice).HasMaxLength(50);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.PropertyAddress).HasMaxLength(2000);

                entity.Property(e => e.PropertyTrusteeAcn)
                    .HasMaxLength(2000)
                    .HasColumnName("PropertyTrusteeACN");

                entity.Property(e => e.PropertyTrusteeName).HasMaxLength(2000);

                entity.Property(e => e.PropertyTrusteeSetupDate).HasColumnType("date");

                entity.Property(e => e.Smsf)
                    .HasMaxLength(2000)
                    .HasColumnName("SMSF");

                entity.Property(e => e.Smsfacn)
                    .HasMaxLength(2000)
                    .HasColumnName("SMSFACN");

                entity.Property(e => e.SmsfcompanyName)
                    .HasMaxLength(2000)
                    .HasColumnName("SMSFCompanyName");

                entity.Property(e => e.SmsftrusteeSetupDate)
                    .HasColumnType("date")
                    .HasColumnName("SMSFTrusteeSetupDate");

                entity.Property(e => e.TotalUnitHolders).HasMaxLength(50);

                entity.Property(e => e.TrustName).HasMaxLength(500);

                entity.Property(e => e.TrustSetupDate).HasColumnType("date");

                entity.Property(e => e.TrustState).HasMaxLength(200);

                entity.Property(e => e.TrustType).HasMaxLength(50);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblTrustAppointer>(entity =>
            {
                entity.ToTable("Tbl_TrustAppointer");

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.CompanyAcn)
                    .HasMaxLength(500)
                    .HasColumnName("CompanyACN");

                entity.Property(e => e.CompanyName).HasMaxLength(500);

                entity.Property(e => e.CompanyRegDate).HasColumnType("datetime");

                entity.Property(e => e.ContactPersonName).HasMaxLength(500);

                entity.Property(e => e.Country).HasMaxLength(500);

                entity.Property(e => e.Dob)
                    .HasColumnType("datetime")
                    .HasColumnName("DOB");

                entity.Property(e => e.FirstName).HasMaxLength(500);

                entity.Property(e => e.HolderType).HasMaxLength(50);

                entity.Property(e => e.IsTrustee).HasDefaultValueSql("((0))");

                entity.Property(e => e.LastName).HasMaxLength(500);

                entity.Property(e => e.MiddleName).HasMaxLength(500);

                entity.Property(e => e.PostCode).HasMaxLength(500);

                entity.Property(e => e.State).HasMaxLength(500);

                entity.Property(e => e.Street).HasMaxLength(2000);

                entity.Property(e => e.Suburb).HasMaxLength(500);

                entity.Property(e => e.UnitLevel).HasMaxLength(2000);

                entity.Property(e => e.UnitType).HasMaxLength(500);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblTrustOption>(entity =>
            {
                entity.ToTable("Tbl_TrustOption");

                entity.Property(e => e.AddedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblUser>(entity =>
            {
                entity.ToTable("Tbl_User");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.Del).HasDefaultValueSql("((0))");

                entity.Property(e => e.DeletedDate).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.FirstName).HasMaxLength(50);

                entity.Property(e => e.LastLogIn).HasColumnType("datetime");

                entity.Property(e => e.LastName).HasMaxLength(50);

                entity.Property(e => e.Password).HasMaxLength(50);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.ProfilePic).HasMaxLength(500);

                entity.Property(e => e.Role)
                    .HasMaxLength(50)
                    .HasColumnName("_Role");

                entity.Property(e => e.Tuser)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblUserMetum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Tbl_UserMeta");

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.MetaName).HasMaxLength(500);

                entity.HasOne(d => d.User)
                    .WithMany()
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Tbl_UserMeta_Tbl_User");
            });

            modelBuilder.Entity<TempCsearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_csearch");

                entity.Property(e => e.AsicAcn)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Asic_ACN");

                entity.Property(e => e.AsicDocNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Asic_DocNo");

                entity.Property(e => e.AsicError).HasColumnName("Asic_Error");

                entity.Property(e => e.AsicFile).HasColumnName("Asic_File");

                entity.Property(e => e.AsicResType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Asic_ResType");

                entity.Property(e => e.AsicStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Asic_status");

                entity.Property(e => e.CompanyName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FullAddress)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Fullname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("FULLNAME");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Isship)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("isship");

                entity.Property(e => e.SearchOn).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("status");

                entity.Property(e => e.Userid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("userid");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}